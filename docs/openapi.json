{
  "openapi": "3.0.3",
  "info": {
    "title": "Group 8",
    "version": "0.0.1"
  },
  "servers":[
    {
      "url": "http://localhost:8000",
      "description": "Development server"
    },
    {
      "url": "https://api.staging-arcopri.ml",
      "description": "Staging server"
    },
    {
      "url": "https://api.arcopri.ml",
      "description": "Production server"
    }
  ],
  "tags":[
    {
      "name": "Authentication"
    },
    {
      "name": "Accounts"
    },
    {
      "name": "Operations"
    },
    {
      "name": "Common"
    }
  ],
  "paths": {
    "/v1/authentication/google/": {
      "post": {
        "summary": "Endpoint to get the JWT and refresh tokens",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/idToken"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorizationTokens"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id_token": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "The token is invalid or expired. Please login again.",
                          "This field is required."
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/authentication/token/validate/": {
      "post": {
        "summary": "Endpoint to validate an access token",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "format": "jwt",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX3BrIjoxLCJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiY29sZF9zdHVmZiI6IuKYgyIsImV4cCI6MTIzNTY3LCJqdGkiOiJjNzE4ZTVkNjgzZWQ0NTQyYTU0NWJkM2VmMGI0ZGQ0ZSJ9.ekxRxgb9OKmHkfy-zs1Ro_xs1eMLXiR17dIDBVxeT-w"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id_token": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": ["This field is required."]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string",
                      "enum": ["Token is invalid or expired"]
                    },
                    "code": {
                      "type": "string",
                      "enum": ["token_not_valid"]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/authentication/token/refresh/": {
      "post": {
        "summary": "Endpoint to refresh the JWT and refresh tokens",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/refreshToken"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorizationTokens"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id_token": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": ["This field is required."]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string",
                      "enum": [
                        "Token is invalid or expired",
                        "Token is blacklisted"
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": ["token_not_valid"]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/account/": {
      "get": {
        "security": [
          {
            "JSONWebTokenAuth": []
          }
        ],
        "summary": "Endpoint to get all the information of one account",
        "tags": ["Accounts"],
        "responses": {
          "200": {
            "description": "A JSON object with the user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/v1/account/devices/": {
      "put": {
        "security": [
          {
            "JSONWebTokenAuth": []
          }
        ],
        "summary": "Endpoint to create or update an Expo device",
        "tags": ["Accounts"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Device"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK (updated if a device with the same OS ID already exists)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "expo_push_token": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": ["device with this expo push token already exists."]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/v1/operations/stores/": {
      "get": {
        "security": [
          {
            "JSONWebTokenAuth": []
          }
        ],
        "summary": "Endpoint to get a list of zones",
        "tags": ["Operations"],
        "responses": {
          "200": {
            "description": "An array of stores",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Store"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/v1/operations/stores/{id}": {
      "get": {
        "security": [
          {
            "JSONWebTokenAuth": []
          }
        ],
        "summary": "Endpoint to get a store by ID",
        "tags": ["Operations"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Store ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with the store information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/v1/operations/stores/events/": {
      "post": {
        "security": [
          {
            "JSONWebTokenAuth": []
          }
        ],
        "summary": "Endpoint to create events on every store",
        "tags": ["Operations"],
        "responses": {
          "201": {
            "description": "An array of the created events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/v1/operations/stores/{id}/events": {
      "get": {
        "security": [
          {
            "JSONWebTokenAuth": []
          }
        ],
        "summary": "Endpoint to get the events of a store",
        "tags": ["Operations"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Store ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of the store events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/v1/operations/zones/": {
      "get": {
        "security": [
          {
            "JSONWebTokenAuth": []
          }
        ],
        "summary": "Endpoint to get a list of zones",
        "tags": ["Operations"],
        "responses": {
          "200": {
            "description": "A JSON array of zones names",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Zone"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/v1/operations/zones/{id}": {
      "get": {
        "security": [
          {
            "JSONWebTokenAuth": []
          }
        ],
        "summary": "Endpoint to get a zone by ID",
        "tags": ["Operations"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Zone ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of zones",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Zone"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/health-check/": {
      "get": {
        "summary": "Health check endpoint for the backend, checks for pending migrations",
        "tags": ["Common"],
        "responses": {
          "200": {
            "description": "OK"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "JSONWebTokenAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "detail": {
                  "type": "string",
                  "enum": ["Authentication credentials were not provided."]
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "idToken": {
        "type": "object",
        "properties": {
          "id_token": {
            "type": "string",
            "writeOnly": true,
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRlOTU1NmFkNDY4MDMxMmMxMTdhZmFlZjI5MjBmNWY5OWE0Yzc5ZmQiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJhenAiOiIxMDEzMzUyMjQ2MTgwLWFqdXIxcTc0bXQ0MHNnNnI4MWZ1ZjhpdmllamwxdmpqLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwiYXVkIjoiMTAxMzM1MjI0NjE4MC1hanVyMXE3NG10NDBzZzZyODFmdWY4aXZpZWpsMXZqai5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjExMzc2OTcyMDM3NTI2MDkxMzk4NCIsImhkIjoidWMuY2wiLCJlbWFpbCI6Imp5aG9ybWF6YWJhbEB1Yy5jbCIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJub25jZSI6IjAwMDM3NDUyNWRhZmI5OWZjMzQwYTFmM2VjYzU5MDExMzhjYzBkYWM4MDY2NjlhOGZjYzMwOTkwM2I1ZjEzOWIiLCJuYW1lIjoiSmVzc2ljYSBIb3JtYXphYmFsIiwicGljdHVyZSI6Imh0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS9hLS9BT2gxNEdnaE52cWVJU2t0MGp3Ums0RTF1QXR5U2E4Z0dCRGRmVnJXckRMZV82QT1zOTYtYyIsImdpdmVuX25hbWUiOiJKZXNzaWNhIiwiZmFtaWx5X25hbWUiOiJIb3JtYXphYmFsIiwibG9jYWxlIjoiZXMiLCJpYXQiOjE2MTk0NjA1NzYsImV4cCI6MTYxOTQ2NDE3NiwianRpIjoiODcyYmM4ZmFhNWVlYWVjM2U4NmNiNjEyMDYyNjdjOGYxYmJiMjdmZSJ9.FsgLPKlsTyqeoY6vdzQob-T8d5U8nIf85aDwaiHvomfs_gL-Qg5ME7vUGqiEF1YRzccmiifCC-ifjhtxslOmh9WnG5AXWH-3aAcPkeyW1YGtO3aamGNxj9Kf_ty8iU3TSKr2MERs2f5Y65kSIhgNCN4eg9sY2O5K9QglUjVbor-TtN3b2wnQZJIUexIB3nSLhsN-s6yugLIRZJN1Mtt63SFS8Yx68mPF97Bs6ysmD2a0kDC0Q7fWafeZnCTicd4OoyZersRtGI9nXL115MHOxCucHsMNL7WYwb35NOgvSkZXxL9FVe-GBqiiTOcfr0jhwZAzWe5Rfb4XcSQO7YHGQQ"
          }
        }
      },
      "accessToken": {
        "type": "object",
        "properties": {
          "access": {
            "type": "string",
            "format": "jwt",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX3BrIjoxLCJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiY29sZF9zdHVmZiI6IuKYgyIsImV4cCI6MTIzNTY3LCJqdGkiOiJjNzE4ZTVkNjgzZWQ0NTQyYTU0NWJkM2VmMGI0ZGQ0ZSJ9.ekxRxgb9OKmHkfy-zs1Ro_xs1eMLXiR17dIDBVxeT-w"
          }
        }
      },
      "refreshToken": {
        "type": "object",
        "properties": {
          "refresh": {
            "type": "string",
            "format": "jwt",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX3BrIjoxLCJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImNvbGRfc3R1ZmYiOiLimIMiLCJleHAiOjIzNDU2NywianRpIjoiZGUxMmY0ZTY3MDY4NDI3ODg5ZjE1YWMyNzcwZGEwNTEifQ.aEoAYkSJjoWH1boshQAaTkf8G3yn0kapko6HFRt7Rh4"
          }
        }
      },
      "authorizationTokens": {
        "allOf": [
          {
            "$ref": "#/components/schemas/accessToken"
          },
          {
            "$ref": "#/components/schemas/refreshToken"
          }
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "dlleal@uc.cl"
          },
          "given_name": {
            "type": "string",
            "example": "Dani"
          },
          "picture": {
            "type": "string",
            "example": "https://lh3.googleusercontent.com/a/AATXAJzZRcXznM1OqOz4L6M_X-Ubg20oTj6KAcQAI9J6=s96-c"
          },
          "role": {
            "type": "integer",
            "example": 1
          },
          "stores": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "example": [1, 3]
          }
        }
      },
      "Device": {
        "type": "object",
        "properties": {
          "android_id": {
            "type": "string",
            "description": "uses Expo’s [`Application.androidId`](https://docs.expo.io/versions/latest/sdk/application/#applicationandroidid)",
            "format": "hexadecimal",
            "nullable": true,
            "example": "dd96dec43fb81c97"
          },
          "ios_id": {
            "type": "string",
            "description": "uses Expo’s [`Application.getIosIdForVendorAsync()`](https://docs.expo.io/versions/latest/sdk/application/#applicationgetiosidforvendorasync)",
            "format": "hexadecimal",
            "nullable": true,
            "example": "68753A44-4D6F-1226-9C60-0050E4C00067"
          },
          "expo_push_token": {
            "type": "string",
            "description": "uses Expo’s [`Notifications.getExpoPushTokenAsync()`](https://docs.expo.io/versions/latest/sdk/notifications/#getexpopushtokenasyncoptions-expotokenoptions-expopushtoken)",
            "nullable": true,
            "example": "ExponentPushToken[0w_gV4MVHgDrwDyOl-s0A7]"
          }
        }
      },
      "Zone": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Sample zone"
          }
        }
      },
      "Store": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Sample store"
          },
          "zone": {
            "type": "integer",
            "example": 1
          }
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "store": {
            "type": "integer",
            "example": 1
          },
          "data": {
            "type": "object",
            "example": {
              "event": "This is an event example content"
            }
          }
        }
      }
    }
  }
}
